package ru.mentee.power.conditions;

import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;


class TrafficLightTest {

    @Test
    void testGetRecommendation_RedSignal() {
        assertThat(TrafficLight.getRecommendation("–ö—Ä–∞—Å–Ω—ã–π")).isEqualTo("–°—Ç–æ–π –Ω–∞ –º–µ—Å—Ç–µ!");
        assertThat(TrafficLight.getRecommendation("–∫—Ä–∞—Å–Ω—ã–π")).isEqualTo("–°—Ç–æ–π –Ω–∞ –º–µ—Å—Ç–µ!"); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    }

    @Test
    void testGetRecommendation_YellowSignal() {
        assertThat(TrafficLight.getRecommendation("–ñ–µ–ª—Ç—ã–π")).isEqualTo("–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è, –Ω–æ –ø–æ–¥–æ–∂–¥–∏!");
        assertThat(TrafficLight.getRecommendation("–ñ–ï–õ–¢–´–ô")).isEqualTo("–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è, –Ω–æ –ø–æ–¥–æ–∂–¥–∏!");
    }

    @Test
    void testGetRecommendation_GreenSignal() {
        assertThat(TrafficLight.getRecommendation("–ó–µ–ª–µ–Ω—ã–π")).isEqualTo("–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ—Ä–æ–≥—É!");
        assertThat(TrafficLight.getRecommendation("–∑–µ–ª–µ–Ω—ã–π")).isEqualTo("–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ—Ä–æ–≥—É!");
    }

    // üî• –í–ê–®–ê –ó–ê–î–ê–ß–ê: –î–æ–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç! üî•
    @Test
    void testGetRecommendation_InvalidSignal() {
        assertThat(TrafficLight.getRecommendation("–°–∏–Ω–∏–π")).isEqualTo("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª!");
        assertThat(TrafficLight.getRecommendation("")).isEqualTo("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª!");
    }
}